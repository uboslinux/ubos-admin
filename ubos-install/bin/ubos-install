#!/usr/bin/perl
#
# Install UBOS on one or more currently unmounted devices or disk images,
# or in a directory.
#

use strict;
use warnings;

use Getopt::Long qw( :config pass_through );

use UBOS::Logging;
use UBOS::Utils;

my $verbose;
my $logConfigFile;
my $debug;
my $help;
my $listDeviceClasses;
my $deviceConfigFile;
my $asOf;
my $arch;
my $deviceClass;
my $hostname;
my $channel;
my $productInfoFile;
my @additionalPackages;
my @additionalServices;
my @additionalKernelModules;
my @additionalKernelParameters;
my $installDepotRoot;
my $runDepotRoot;
my $installCheckSignatures;
my $runCheckSignatures;
my %installAddPackageDbs;
my %runAddPackageDbs;
my @installRemovePackageDbs;
my @runRemovePackageDbs;
my @installDisablePackageDbs;
my @runDisablePackageDbs;
my @mbrBootLoaderDevices;
my $rootDevice;
my @bootPartitions;
my @rootPartitions;
my @ubosPartitions;
my @swapPartitions;
my @addMounts;
my $noBoot;
my $swap;
my $gpt;
my $mbr;
my @run;

my $parseOk = GetOptions(
        'verbose+'                     => \$verbose,
        'logConfig=s'                  => \$logConfigFile,
        'debug'                        => \$debug,
        'h|help'                       => \$help,

        'listdeviceclasses'            => \$listDeviceClasses,

        'device-config=s'              => \$deviceConfigFile,
        'asof=s'                       => \$asOf,

        'arch=s'                       => \$arch,
        'deviceclass=s'                => \$deviceClass,

        'hostname=s'                   => \$hostname,
        'channel=s'                    => \$channel,
        'product-info=s'               => \$productInfoFile,

        'add-package=s'                => \@additionalPackages,
        'add-service=s'                => \@additionalServices,
        'add-kernel-module=s'          => \@additionalKernelModules,
        'add-kernel-parameter=s'       => \@additionalKernelParameters,

        'install-depot-root=s'         => \$installDepotRoot,
        'run-depot-root=s'             => \$runDepotRoot,
        'install-check-signatures=s'   => \$installCheckSignatures,
        'run-check-signatures=s'       => \$runCheckSignatures,

        'install-add-package-db=s'     => \%installAddPackageDbs,
        'run-add-package-db=s'         => \%runAddPackageDbs,
        'install-remove-package-db=s'  => \@installRemovePackageDbs,
        'run-remove-package-db=s'      => \@runRemovePackageDbs,
        'install-disable-package-db=s' => \@installDisablePackageDbs,
        'run-disable-package-db=s'     => \@runDisablePackageDbs,

        'mbrbootloaderdevice=s'        => \@mbrBootLoaderDevices,
        'rootdevice=s'                 => \$rootDevice,
        'bootpartition=s'              => \@bootPartitions,
        'rootpartition=s'              => \@rootPartitions,
        'ubospartition=s'              => \@ubosPartitions,
        'swappartition=s'              => \@swapPartitions,

        'add-mount=s'                  => \@addMounts,
        'noboot'                       => \$noBoot,

        'swap!'                        => \$swap,
        'gpt'                          => \$gpt,
        'mbr'                          => \$mbr,

        'run=s'                        => \@run );

UBOS::Logging::initialize( 'ubos-install', undef, $verbose, $logConfigFile, $debug );

if( $help ) {
    synopsisHelpQuit( 1 );
}
if( !$parseOk ) {
    synopsisHelpQuit( 0 );
}

if(      $listDeviceClasses
    && (    $deviceConfigFile
         || $arch
         || $deviceClass
         || $hostname
         || $channel
         || $productInfoFile
         || @additionalPackages
         || @additionalServices
         || @additionalKernelModules
         || @additionalKernelParameters
         || $installDepotRoot
         || $runDepotRoot
         || $installCheckSignatures
         || $runCheckSignatures
         || keys %installAddPackageDbs
         || keys %runAddPackageDbs
         || @installRemovePackageDbs
         || @runRemovePackageDbs
         || @installDisablePackageDbs
         || @runDisablePackageDbs
         || @mbrBootLoaderDevices
         || $rootDevice
         || @bootPartitions
         || @rootPartitions
         || @ubosPartitions
         || @swapPartitions
         || $swap
         || $gpt
         || $mbr
         || @run ))
{
    synopsisHelpQuit( 0 );
}

if( $listDeviceClasses ) {
    listInstallersQuit();
}

# Just invoking help doesn't trigger this check
if ( $< != 0 ) {
    fatal( "This command must be run as root" );
}

my $deviceConfig;
if( $deviceConfigFile ) {
    $deviceConfig = UBOS::Utils::readJsonFromFile( $deviceConfigFile );
    unless( $deviceConfig ) {
        fatal();
    }
} else {
    $deviceConfig = {};
}

# Merge copmmand-line arguments into $deviceConfig, overriding whatever is
# given there. Do no checking at this time; we do this all at the same time later

if( $hostname ) {
    $deviceConfig->{hostname} = $hostname;
}
if( $channel ) {
    $deviceConfig->{channel} = $channel;
}
if( $asOf ) {
    $deviceConfig->{asof} = $asOf;
}
if( $productInfoFile ) {
    my $productInfo = UBOS::Utils::readJsonFromFile( $productInfoFile );
    unless( $productInfo ) {
        fatal( $! );
    }
    $deviceConfig->{productinfo} = $productInfo;
}
if( @additionalPackages ) {
    $deviceConfig->{additionalpackages} = \@additionalPackages;
}
if( @additionalServices ) {
    $deviceConfig->{additionalservices} = \@additionalServices;
}
if( @additionalKernelModules ) {
    $deviceConfig->{additionalkernelmodules} = \@additionalKernelModules;
}
if( @additionalKernelParameters ) {
    $deviceConfig->{additionalkernelparameters} = \@additionalKernelParameters;
}
if( $installDepotRoot ) {
    $deviceConfig->{installdepotroot} = $installDepotRoot;
}
if( $runDepotRoot ) {
    $deviceConfig->{rundepotroot} = $runDepotRoot;
}
if( $installCheckSignatures ) {
    $deviceConfig->{installchecksignatures} = $installCheckSignatures;
}
if( $runCheckSignatures ) {
    $deviceConfig->{runchecksignatures} = $runCheckSignatures;
}
if( keys %installAddPackageDbs ) {
    $deviceConfig->{installaddpackagedbs} = \%installAddPackageDbs;
}
if( keys %runAddPackageDbs ) {
    $deviceConfig->{runaddpackagedbs} = \%runAddPackageDbs;
}
if( @installRemovePackageDbs ) {
    $deviceConfig->{installremovepackagedbs} = \@installRemovePackageDbs;
}
if( @runRemovePackageDbs ) {
    $deviceConfig->{runremovepackagedbs} = \@runRemovePackageDbs;
}
if( @installDisablePackageDbs ) {
    $deviceConfig->{installdisablepackagedbs} = \@installDisablePackageDbs;
}
if( @runDisablePackageDbs ) {
    $deviceConfig->{rundisablepackagedbs} = \@runDisablePackageDbs;
}
if( @mbrBootLoaderDevices ) {
    $deviceConfig->{mbrbootloaderdevices} = \@mbrBootLoaderDevices;
}
if( $rootDevice ) {
    $deviceConfig->{rootdevice} = $rootDevice;
}
if( @bootPartitions ) {
    $deviceConfig->{bootpartitions} = \@bootPartitions;
}
if( @rootPartitions ) {
    $deviceConfig->{rootpartitions} = \@rootPartitions;
}
if( @ubosPartitions ) {
    $deviceConfig->{ubospartitions} = \@ubosPartitions;
}
if( @swapPartitions ) {
    $deviceConfig->{swappartitions} = \@swapPartitions;
}
if( @addMounts ) {
    $deviceConfig->{additionalmounts} = \@addMounts;
}
if( $noBoot ) {
    $deviceConfig->{noboot} = $noBoot;
}

if( $swap ) {
    $deviceConfig->{swap} = $swap;
}
if( $gpt ) {
    if( $mbr ) {
        $deviceConfig->{partitioningscheme} = 'gpt+mbr';
    } else {
        $deviceConfig->{partitioningscheme} = 'gpt';
    }
} elsif( $mbr ) {
    $deviceConfig->{partitioningscheme} = 'mbr';
}
if( @run ) {
    $deviceConfig->{run} = \@run;
}

if( @ARGV ) {
    $deviceConfig->{installtargets} = [ @ARGV ]; # copy
}

# Defaults for $arch and $deviceClass are determined here so we can
# find the right Installer. All other defaults are determined by
# the Installer itself.

if( $arch ) {
    $deviceConfig->{arch} = $arch;
}
if( $deviceClass ) {
    $deviceConfig->{deviceclass} = $deviceClass;
}

my $tmp;
unless( $deviceConfig->{arch} ) {
    $deviceConfig->{arch} = UBOS::Utils::arch();
}
$tmp = UBOS::Utils::isValidArch( $deviceConfig->{arch} );
unless( $tmp ) {
    fatal( 'Invalid arch:', $deviceConfig->{arch} );
}
$deviceConfig->{arch} = $tmp;

unless( $deviceConfig->{deviceclass} ) {
    $deviceConfig->{deviceclass} = UBOS::Utils::deviceClass();
}
$tmp = UBOS::Utils::isValidDeviceClass( $deviceConfig->{deviceclass} );
unless( $tmp ) {
    fatal( 'Invalid device class:', $deviceConfig->{deviceclass} );
}
$deviceConfig->{deviceclass} = $tmp;

# Find installer, configure it with the deviceConfig and complete/validate

my $installer = findInstaller( $deviceConfig->{arch}, $deviceConfig->{deviceclass} );
unless( $installer ) {
    fatal( 'Cannot find installer for arch', $deviceConfig->{arch}, 'deviceclass', $deviceConfig->{deviceclass} );
}

trace( 'Using installer', ref( $installer ));

my $errors = $installer->setDeviceConfig( $deviceConfig );
if( $errors ) {
    goto END;
}
$errors = $installer->checkComplete();
if( $errors ) {
    goto END;
}

# Do the installation

trace( 'Checking the network' );
unless( UBOS::Utils::isOnline() ) {
    fatal( 'Cannot connect to the UBOS software depot; leaving system and disks unchanged' );
}

trace( 'Running the installation' );
$errors = $installer->install();

# Done

END:
if( $errors ) {
    info( 'There were', $errors, 'errors.' );
    exit( 1 );
}
UBOS::Utils::myexec( "sync" );
exit( 0 );


##
# Find the right installer for this device class
sub findInstaller {
    my $archName        = shift;
    my $deviceClassName = shift;

    my $className = $archName . '-' . $deviceClassName;
    my $installers = getInstallers();
    my $installer  = $installers->{$className};

    unless( $installer ) {
        return undef;
    }

    my $ret = UBOS::Utils::invokeMethod( $installer . '->new' );
    return $ret;
}

##
# Get the available installers
my $_installers;
sub getInstallers {
    unless( $_installers ) {
        $_installers = UBOS::Utils::findPerlShortModuleNamesInPackage( 'UBOS::Install::Installers' );
    }
    return $_installers;
}

##
# List the available installers and quit
sub listInstallersQuit {
    my $installers = getInstallers();

    my @rows;
    my @colLengths = ( 0, 0, 0 );
    foreach my $key ( keys %$installers ) {
        my $installer = $installers->{$key};
        my $newRow = [
                UBOS::Utils::invokeMethod( $installer . '::arch' ),
                UBOS::Utils::invokeMethod( $installer . '::deviceClass' ),
                UBOS::Utils::invokeMethod( $installer . '::help' )
        ];
        $colLengths[0] = _max( $colLengths[0], length( $newRow->[0] ));
        $colLengths[1] = _max( $colLengths[1], length( $newRow->[1] ));
        $colLengths[2] = _max( $colLengths[2], length( $newRow->[2] ));
        push @rows, $newRow;
    }
    @rows = sort { ($a->[0] cmp $b->[0]) || ($a->[1] cmp $b->[1]) } @rows;

    printf( "%-" . $colLengths[0] . "s  %-" . $colLengths[1] . "s  %s\n", 'arch', 'deviceclass', 'description' );
    printf( '=' x ( $colLengths[0] + $colLengths[1] + $colLengths[2] + 4 ) . "\n" );

    foreach my $row ( @rows ) {
        printf( "%-" . $colLengths[0] . "s  %-" . $colLengths[1] . "s  %s\n", @$row );
    }

    exit( 0 );
}

#####
# Max value
sub _max {
    my $a = shift;
    my $b = shift;

    if( $a > $b ) {
        return $a;
    } else {
        return $b;
    }
}

#####
# Print synopsis or help
# $long: if true, print long help
# $exit: exit code
sub synopsisHelpQuit {
    my $long = shift;
    my $exit = shift || 0;

    if( $long ) {
        print <<END;
Install UBOS.
END
    } else {
        print "Synopsis:\n";
    }
    print "    $0 <device> ...\n";
    if( $long ) {
        print <<END;
        Install UBOS on <device>. <device> must be a disk device, a pre-allocated disk image,
        or an empty directory.
        If more than one <device> is given, mirror across at least two disks (RAID1).
        Details on what devices are allowed in what configuration depend on the deviceclass
        and arch for which the installation is being performed.
        WARNING: THIS WILL FORMAT <device>. ALL YOUR DATA ON IT WILL BE LOST.
END
    }

    print "    $0 --rootpartition <part>\n";
    if( $long ) {
        print <<END;
        Install UBOS on root partition <part>. <part> must be a partition such as /dev/sda3.
        If more than one root partition is given, mirror across at least two partitions (RAID1).
        WARNING: THIS WILL OVERWRITE all partitions you specify with --rootpartition and any
        other optional partition parameters you may be specifying. ALL YOUR DATA ON THEM WILL
        BE LOST. However, it will not change the partition table or touch other partitions.
END
    }
    print "    $0 --listdeviceclasses\n";
    if( $long ) {
        print <<END;
        Show the device classes that can be specified to install for. No other options are
        permitted when specifying this option.
END
    }
    print "    $0 --help\n";
    if( $long ) {
        print <<END;
        Display help text.

END
    }
    if( $long ) {

        print <<END;
Optional arguments:
    --verbose
          Display extra output. May be repeated for even more output.
    --logConfFile <log4perlconf>
          Use an alternate log configuration file for this command.
    --device-config <file>
          Read options from the provided file <file>. If additional options are provided
          on the command-line, the command-line overwrites the options provided in the file.
    --arch <arch>
          The computer architecture, e.g. x86_64 or aarch64. The architecture of the host on
          which $0 is run and the specified arch should be the same, or results will be
          unpredictable.
    --deviceclass <class>
          The device class, e.g. rpi (Raspberry Pi) or pc (x86_64 PC). The deviceclass must
          exist for the arch.
    --hostname <hostname>
          The hostname to set; defaults to a deviceclass-specific name.
    --channel <channel>
          The UBOS release channel; defaults to the 'green' release channel.
    --productfile <file>
          Read information about the product this installation is for from <file>.
    --add-package <package>
          Name of an additional package to install beyond the default packages for
          the device class
    --add-service <service>
          Name of an additional systemd service to enable beyond the default systemd
          services for the device class
    --add-kernel-module <module>
          Name of an additional kernel module to load beyond the default kernel modules
          for the device class
    --add-kernel-parameter <parameter>
          Verbatim string to be appended to the kernel boot command-line. This currently
          only works on some device classes.
    --install-depot-root <url>
          Use this URL for the root of the code repository from where to download the
          to-be installed packages. Defaults to http://depot.ubos.net
    --run-depot-root <url>
          Use this URL for the root of the code repository from where to download any
          additional or upgraded packages the user wishes to install when the system is
          running. Defaults to http://depot.ubos.net
    --install-check-signatures <never|optional|required>
          Should package signatures be checked during installation. Same as in
          pacman.conf(5). Defaults to required.
    --run-check-signatures <never|optional|required>
          Should package signatures be checked when the system is running. Same as in
          pacman.conf(5). Defaults to required.
    --install-add-package-db <name=server>
          Add an additional pacman repository during installation, where <name> is the section
          name for the pacman configuration, and <server> is the URL where the packages can be
          found. This will be used in conjunction with the URL from --install-depot-root.
    --run-add-package-db <name=server>
          Add an additional pacman repository when the system is running, where <name> is the section
          name for the pacman configuration, and <server> is the URL where the packages can be
          found. This will be used in conjunction with the URL from --run-depot-root.
    --install-remove-package-db <name>
          Do not add one of the default UBOS repositories during installation, where <name>
          is the section name.
    --run-remove-package-db <name>
          Do not add one of the default UBOS repositories when the system is running, where <name>
          is the section name.
    --install-disable-package-db <name>
          Disable one of the otherwise added repositories during installatino, where <name>
          is the section name.
    --run-disable-package-db <name>
          Disable one of the otherwise added repositories when the system is running, where <name>
          is the section name.
    --mbrbootloaderdevice <dev>
          Install an MBR-based boot loader on this block device. This is only used by some device
          classes (e.g. PC) where boot loaders are written to a special place on the hard
          disk.
          This can only be used when ubos-install is invoked in the --rootpartition style.
    --rootdevice <dev>
          Override the root device passed to the kernel command-line in spite of other
          parameters. Cannot be used on some device classes (e.g. PC).
    --bootpartition <part>
          Use this block device as boot partition. If not provided, there will be no
          separate boot partition. Note that some systems (e.g. Raspberry Pi) cannot
          boot from a btrfs filesystem, and thus require that you specify a separate
          boot partition that can be formatted as vfat.
          This can only be used when ubos-install is invoked in the --rootpartition style.
    --ubospartition <part>
          Use a separate /ubos partition. If more than one /ubos partition is given, mirror
          across at least two partitions (RAID1).
          This can only be used when ubos-install is invoked in the --rootpartition style.
    --swappartition <part>
          Create a swap partition, or several if more than one is given.
          This can only be used when ubos-install is invoked in the --rootpartition style.
    --add-mount <fstabentry>
          Add an entry at the end of /etc/fstab.
    --noboot
          Do not generate a boot partition or install a boot loader.
    --[no]swap
          Deviate from the defaults of the device class by definitely creating a swap
          partition, or not creating a swap partition.
    --gpt
          Deviate from the defaults of the device class by creating a GPT partition table.
    --mbr
          Deviate from the defaults of the device class by creating a MBR (MSDOS) partition table.
    --run <path>
          Before ending the installation, run the script or executable at this path within the chroot,
END
    } else {
        print <<END;
Optional arguments:
    [--verbose][--logConfFile <log4perlconf>]
    [--device-config <file>]
    [--arch <arch>][--deviceclass <class>]
    [--hostname <hostname>][--channel <channel>][--productfile <file>]
    [--add-package <package>][--add-service <service>][--add-kernel-module <module>][--add-kernel-parameter <parameter>]
    [--install-depot-root <url>][--run-depot-root <url>]
    [--install-check-signatures <never|optional|required>][--run-check-signatures <never|optional|required>]
    [--install-add-package-db <name=server>][--install-remove-package-db <name>][--install-disable-package-db <name>]
    [--run-add-package-db <name=server>][--run-remove-package-db <name>][--run-disable-package-db <name>]
    [--mbrbootloaderdevice <dev>][--rootdevice <dev>]
    [--bootpartition <part>][--rootpartition <part>][--ubospartition <part>][--swappartition <part>]
    [--add-mount <fstabentry>][--noboot]
    [--swap | --noswap ][--gpt][--mbr]
    [--run <script>]
END
    }
    exit 1;
}

1;
